version: "3"
services:

    zookeeper:
        hostname: myzookeeper
        container_name: zookeeper
        image: 'bitnami/zookeeper:3.7.0'  
        restart: on-failure
        environment:
            - ALLOW_ANONYMOUS_LOGIN=yes
        networks:
            - nifi_shared_persistent_network

    registry:
        hostname: myregistry
        container_name: registry
        image: 'apache/nifi-registry:1.15.0'  
        restart: on-failure
        ports:
            - "18080:18080"
        environment:
            - LOG_LEVEL=INFO
            - NIFI_REGISTRY_DB_DIR=/opt/nifi-registry/nifi-registry-current/database
            - NIFI_REGISTRY_FLOW_PROVIDER=file
            - NIFI_REGISTRY_FLOW_STORAGE_DIR=/opt/nifi-registry/nifi-registry-current/flow_storage
        volumes:
            - ./nifi_registry/database:/opt/nifi-registry/nifi-registry-current/database
            - ./nifi_registry/flow_storage:/opt/nifi-registry/nifi-registry-current/flow_storage
        networks:
            - nifi_shared_persistent_network

    nifi:
        hostname: mynifi
        container_name: nifi
        image: 'apache/nifi:1.14.0'  
        restart: on-failure
        ports:
            - '8091:8080'
            - '5055:5055'
        environment:
            - NIFI_WEB_HTTP_PORT=8080
            - NIFI_CLUSTER_IS_NODE=true
            - NIFI_CLUSTER_NODE_PROTOCOL_PORT=8082
            - NIFI_ZK_CONNECT_STRING=myzookeeper:2181
            - NIFI_ELECTION_MAX_WAIT=30 sec
            - NIFI_SENSITIVE_PROPS_KEY='12345678901234567890A'
        healthcheck:
            test: "${DOCKER_HEALTHCHECK_TEST:-curl localhost:8091/nifi/}"
            interval: "60s"
            timeout: "3s"
            start_period: "5s"
            retries: 5
        volumes:
            - ./nifi/database_repository:/opt/nifi/nifi-current/database_repository
            - ./nifi/flowfile_repository:/opt/nifi/nifi-current/flowfile_repository
            - ./nifi/content_repository:/opt/nifi/nifi-current/content_repository
            - ./nifi/provenance_repository:/opt/nifi/nifi-current/provenance_repository
            - ./nifi/state:/opt/nifi/nifi-current/state
            - ./nifi/logs:/opt/nifi/nifi-current/logs
            - ./nifi/conf:/opt/nifi/nifi-current/conf
            - ./outputdata:/opt/nifi/nifi-current/outputdata
        networks:
            - nifi_shared_persistent_network

    kafka:
        image: bitnami/kafka:2.5.0
        container_name: "kafka"
        networks:
            - "nifi_shared_persistent_network"
        ports:
            - "9092:9092"
        environment:
            - KAFKA_BROKER_ID=1
            - KAFKA_LISTENERS=PLAINTEXT://:9092
            - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
            - ALLOW_PLAINTEXT_LISTENER=yes
        depends_on:
            - zookeeper
    
    ftp:
        image: stilliard/pure-ftpd
        container_name: ftp
        hostname: ftp
        ports:
        - "21:21"
        - "30000-30009:30000-30009"
        volumes: 
        - "./ftp/data:/home/username/"
        - "./ftp/passwd:/etc/pure-ftpd/passwd"

        environment:
           - PUBLICHOST=ftp
           - FTP_USER_NAME=username
           - FTP_USER_PASS=mypass
           - FTP_USER_HOME=/home/username
        restart: always
        networks:
            - nifi_shared_persistent_network
   
    db:
        image: postgres:14.1-alpine
        restart: always
        environment:
        - POSTGRES_USER=postgres
        - POSTGRES_PASSWORD=postgres
        ports:
        - '5432:5432'
        volumes: 
        - db:/var/lib/postgresql/data
        - ./db/init.sql:/docker-entrypoint-initdb.d/create_tables.sql
        networks:
            - nifi_shared_persistent_network        
    
    redis:
        image: redis:6.2-alpine
        restart: always
        ports:
        - '6379:6379'
        command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKPCDmwMtyKVge8oLd2t81
        volumes: 
        - ./redis:/data
        networks:
            - nifi_shared_persistent_network
volumes:
    db:
        driver: local
    redis:
        driver: local        
networks:
  nifi_shared_persistent_network:
    driver: bridge